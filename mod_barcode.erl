-module(mod_barcode).
-author("Daniel Hedeblom <maxifoo@gmail.com>").
-mod_title("Barcode Generator").
-mod_description("Generates Barcodes from PostScript").
-mod_prio(100).
-mod_schema(1).

-include_lib("zotonic.hrl").

-record(state, {context}).
-export([init/1]).

-export([
	 manage_schema/2,
	 gen_barcode/4,
	 observe_rsc_update_done/2
]).

%%%%
%%%% Init
%%%%
init(Context) ->
    case m_config:get_value(mod_barcode, barcode_ps_dir, Context) of
	undefined ->
	    m_config:set_value(mod_barcode, barcode_ps_dir, "../barcode_ps", Context);
	_ -> ok
    end,

    case m_config:get_value(mod_barcode, barcode_convert_params, Context) of
	undefined ->
	    m_config:set_value(mod_barcode, barcode_convert_params, "-antialias -density 288x288 -trim +repage", Context);
	_ -> ok
    end,

    {ok, #state{context=Context}}.


%%%%
%%%% Installation
%%%%
manage_schema(install, _Context) ->
    #datamodel{categories=categories(),
               predicates=predicates(),
               resources=resources()
              }.

categories() ->
    [{barcode_type,meta,[{title, <<"Barcode Type">>}]}].

predicates() ->
    [{autocreate_barcode_type,[{title, <<"Barcode">>}],[{category, barcode_type}]}].

resources() ->
    [
     {qrcode, barcode_type, [{title, <<"QR Code">>}]},
     {code93, barcode_type, [{title, <<"Code 93">>}]}
     ].
    

%%%%
%%%% When Update, Autocreate Barcodes
%%%%
observe_rsc_update_done(#rsc_update_done{action=insert, id=Id, pre_props=Prev, post_props=_Post }, Context) ->

    CatId = proplists:get_value(category_id,Prev),

    BarCodeTypes = m_edge:objects(CatId, autocreate_barcode_type, Context),

    autocreate(BarCodeTypes, Id, Context);
    %?zInfo(io_lib:format("Autocreate Barcode of types: ~p",[BarCodeTypes]),Context);

observe_rsc_update_done(_,_) ->
    undefined.



autocreate([BarCodeId|Rest], Id, Context) when is_integer(BarCodeId) ->
    TmpFile = z_tempfile:new(),
    BarCodeType=list_to_atom(binary_to_list(proplists:get_value(name, m_rsc:get(BarCodeId,Context)))),

    %Data can be generated by templates in the future
    case BarCodeType of
	qrcode ->
	    HostName = proplists:get_value(hostname,m_site:all(Context)),
	    BarcodeContent = io_lib:format([["http://"|HostName]|"/page/~p"],[Id]);
	code93 ->
	    BarcodeContent = io_lib:format("~p",[Id]);
	_ ->
	    BarcodeContent = io_lib:format("~p",[Id])
    end,

    case mod_barcode:gen_barcode(BarcodeContent, BarCodeType, TmpFile, Context) of
	[] -> %returns an empty list means ok.
	    Data = file:read_file(TmpFile),
	    case m_media:insert_file(#upload{filename=TmpFile, data=Data, tmpfile=TmpFile, mime="image/png"},Context) of
		{ok, ObjId} ->
		    m_edge:insert(Id, depiction, ObjId, Context),
		    ok;
		Err -> ?zWarning(io_lib:format("Create barcode error ~p~n",[{barcode_error, Err}]),Context),
		       error
	    end;
	Err ->
	    ?zWarning(io_lib:format("Create barcode error ~p~n",[{barcode_error, Err}]),Context),
	    error
    end,
    autocreate(Rest, Id, Context);

autocreate([], _Id, _Context) ->
    ok.



%%%%
%%%% Generate Barcode function
%%%%
to_list(Dir) when is_binary(Dir) ->
    binary_to_list(Dir);
to_list(Dir) when is_list(Dir) ->
    Dir.

exec_command(A, TmpFile, Context) ->
    Dir = to_list(m_config:get_value(mod_barcode, barcode_ps_dir, Context)),
    ConvertParams = to_list(m_config:get_value(mod_barcode, barcode_convert_params, Context)),
    os:cmd([[[[[[[[[["cat <<EOF | cat "]|Dir]|"/barcode.ps - | convert "]|ConvertParams]|" - png:"]|TmpFile]|"\n"]|A]]|"\nEOF"]).

gen_barcode(Data, Type, TmpFile, Context) ->
    Ret = case Type of
	qrcode ->
	    TypeName = "QR Code",
	    TypeFun = "qrcode",
	    {ok};
	code93 ->
	    TypeName = "Code 93",
	    TypeFun = "code93",
	    {ok};
	ErrType ->
	    ?zWarning(io_lib:format("There is no such barcode type: ~p",[ErrType]), Context),
	    TypeName = [],
	    TypeFun = [],
	    {err}
    end,

    case Ret of
	{ok} ->
	    exec_command(lists:flatten([[[[[[["/Helvetica findfont 10 scalefont setfont\n
30 700 moveto ("]|Data]|") (includecheck includetext) /"]|TypeFun] |"/uk.co.terryburton.bwipp findresource exec\n
0 -17 rmoveto ("]|TypeName]|") show\n
\n
showpage"]), TmpFile, Context);
         _ ->
             {barcode_error}
    end.
